
AVRASM ver. 2.1.30  D:\Проекты от студии\Часы\List\01.asm Mon Sep 21 19:29:09 2015

D:\Проекты от студии\Часы\List\01.asm(1057): warning: Register r5 already defined by the .DEF directive
D:\Проекты от студии\Часы\List\01.asm(1058): warning: Register r4 already defined by the .DEF directive
D:\Проекты от студии\Часы\List\01.asm(1059): warning: Register r7 already defined by the .DEF directive
D:\Проекты от студии\Часы\List\01.asm(1060): warning: Register r6 already defined by the .DEF directive
D:\Проекты от студии\Часы\List\01.asm(1061): warning: Register r9 already defined by the .DEF directive
D:\Проекты от студии\Часы\List\01.asm(1062): warning: Register r8 already defined by the .DEF directive
D:\Проекты от студии\Часы\List\01.asm(1063): warning: Register r11 already defined by the .DEF directive
D:\Проекты от студии\Часы\List\01.asm(1064): warning: Register r10 already defined by the .DEF directive
D:\Проекты от студии\Часы\List\01.asm(1065): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega8
                 ;Program type             : Application
                 ;Clock frequency          : 1,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _timeSec=R5
                 	.DEF _timeMin=R4
                 	.DEF _indSwap=R7
                 	.DEF _isIndEnable=R6
                 	.DEF _btn1state=R9
                 	.DEF _btn1PressTime=R8
                 	.DEF _btn2PressTime=R11
                 	.DEF _btn2state=R10
                 	.DEF _migMig=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c01b      	RJMP __RESET
000001 c189      	RJMP _ext_int0_isr
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 c15a      	RJMP _timer2_ovf_isr
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c041      	RJMP _timer0_ovf_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _0x6E:
000013 0000
000014 0001
000015 0000
000016 0001      	.DB  0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0
000017 0000      	.DB  0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000018 000a      	.DW  0x0A
000019 0004      	.DW  0x04
00001a 0026      	.DW  _0x6E*2
                 
                 _0xFFFFFFFF:
00001b 0000      	.DW  0
                 
                 __RESET:
00001c 94f8      	CLI
00001d 27ee      	CLR  R30
00001e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00001f e0f1      	LDI  R31,1
000020 bffb      	OUT  GICR,R31
000021 bfeb      	OUT  GICR,R30
000022 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000023 e1f8      	LDI  R31,0x18
000024 bdf1      	OUT  WDTCR,R31
000025 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000026 e08d      	LDI  R24,(14-2)+1
000027 e0a2      	LDI  R26,2
000028 27bb      	CLR  R27
                 __CLEAR_REG:
000029 93ed      	ST   X+,R30
00002a 958a      	DEC  R24
00002b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00002d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00002e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00002f 93ed      	ST   X+,R30
000030 9701      	SBIW R24,1
000031 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000032 e3e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000033 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000034 9185      	LPM  R24,Z+
000035 9195      	LPM  R25,Z+
000036 9700      	SBIW R24,0
000037 f061      	BREQ __GLOBAL_INI_END
000038 91a5      	LPM  R26,Z+
000039 91b5      	LPM  R27,Z+
00003a 9005      	LPM  R0,Z+
00003b 9015      	LPM  R1,Z+
00003c 01bf      	MOVW R22,R30
00003d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00003e 9005      	LPM  R0,Z+
00003f 920d      	ST   X+,R0
000040 9701      	SBIW R24,1
000041 f7e1      	BRNE __GLOBAL_INI_LOOP
000042 01fb      	MOVW R30,R22
000043 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000044 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000045 bfed      	OUT  SPL,R30
000046 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000047 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000048 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000049 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004a c150      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 15.09.2015
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega8
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 1,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#define RD1 PORTC.4
                 ;#define RD2 PORTC.2
                 ;#define RD3 PORTC.0
                 ;#define RD4 PORTC.1
                 ;#define RD5 PORTB.1
                 ;#define RD6 PORTD.7
                 ;#define RD7 PORTD.6
                 ;#define RD8 PORTD.5
                 ;#define RD9 PORTD.3
                 ;#define RD10 PORTD.1
                 ;#define RD11 PORTD.0
                 ;#define RD12 PORTC.5
                 ;#define LINE2 PORTB.0
                 ;#define LINE1 PORTD.4
                 ;#define BTN2 PIND.2
                 ;#define BTN1 PINC.3
                 ;
                 ;#define MAX_TIME_OFF (20*1000)
                 ;
                 ;char time[3]={0,0,0};
                 ;char timeSec=0, timeMin=0;
                 ;char  indSwap=0, isIndEnable=1;
                 ;char btn1state = 0, btn1PressTime = 0, btn2PressTime = 0, btn2state=1;
                 ;char migMig=0;
                 ;int indState, timeOff=0;
                 ;
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)  //1ms
                 ; 0000 0038 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
00004b 920a      	ST   -Y,R0
00004c 93aa      	ST   -Y,R26
00004d 93ba      	ST   -Y,R27
00004e 93ea      	ST   -Y,R30
00004f 93fa      	ST   -Y,R31
000050 b7ef      	IN   R30,SREG
000051 93ea      	ST   -Y,R30
                 ; 0000 0039 // Reinitialize Timer 0 value
                 ; 0000 003A TCNT0=0x83;
000052 e8e3      	LDI  R30,LOW(131)
000053 bfe2      	OUT  0x32,R30
                 ; 0000 003B 
                 ; 0000 003C // Place your code here
                 ; 0000 003D if(BTN1 == 0)
000054 999b      	SBIC 0x13,3
000055 c00b      	RJMP _0x3
                 ; 0000 003E {
                 ; 0000 003F   timeOff = 0;
000056 d17b      	RCALL SUBOPT_0x0
                 ; 0000 0040   if(btn1PressTime == 50) //Антидребезг контактов
000057 e3e2      	LDI  R30,LOW(50)
000058 15e8      	CP   R30,R8
000059 f431      	BRNE _0x4
                 ; 0000 0041   {
                 ; 0000 0042       btn1PressTime = 0;
00005a 2488      	CLR  R8
                 ; 0000 0043       if(++btn1state>3) btn1state=0;
00005b 9493      	INC  R9
00005c e0e3      	LDI  R30,LOW(3)
00005d 15e9      	CP   R30,R9
00005e f408      	BRSH _0x5
00005f 2499      	CLR  R9
                 ; 0000 0044   }
                 _0x5:
                 ; 0000 0045 }
                 _0x4:
                 ; 0000 0046 else
000060 c004      	RJMP _0x6
                 _0x3:
                 ; 0000 0047 {
                 ; 0000 0048   if(btn1PressTime<50)btn1PressTime++;
000061 e3e2      	LDI  R30,LOW(50)
000062 168e      	CP   R8,R30
000063 f408      	BRSH _0x7
000064 9483      	INC  R8
                 ; 0000 0049 }
                 _0x7:
                 _0x6:
                 ; 0000 004A 
                 ; 0000 004B if(BTN2 == 0)
000065 9982      	SBIC 0x10,2
000066 c03a      	RJMP _0x8
                 ; 0000 004C {
                 ; 0000 004D    timeOff = 0;
000067 d16a      	RCALL SUBOPT_0x0
                 ; 0000 004E    if(++btn2PressTime > 250)
000068 94b3      	INC  R11
000069 efea      	LDI  R30,LOW(250)
00006a 15eb      	CP   R30,R11
00006b f5a0      	BRSH _0x9
                 ; 0000 004F    {
                 ; 0000 0050       btn2PressTime = 0;
00006c 24bb      	CLR  R11
                 ; 0000 0051       switch(btn1state)
00006d 2de9      	MOV  R30,R9
00006e d169      	RCALL SUBOPT_0x1
                 ; 0000 0052       {
                 ; 0000 0053         case 0:
00006f 9730      	SBIW R30,0
000070 f431      	BRNE _0xD
                 ; 0000 0054           if(--btn2state>1)btn2state=1;
000071 94aa      	DEC  R10
000072 e0e1      	LDI  R30,LOW(1)
000073 15ea      	CP   R30,R10
000074 f408      	BRSH _0xE
000075 2eae      	MOV  R10,R30
                 ; 0000 0055         break;
                 _0xE:
000076 c029      	RJMP _0xC
                 ; 0000 0056         case 1:
                 _0xD:
000077 30e1      	CPI  R30,LOW(0x1)
000078 e0a0      	LDI  R26,HIGH(0x1)
000079 07fa      	CPC  R31,R26
00007a f451      	BRNE _0xF
                 ; 0000 0057         if(++time[0]>11)
00007b d15e      	RCALL SUBOPT_0x2
00007c f038      	BRLO _0x10
                 ; 0000 0058         {
                 ; 0000 0059             time[0] = 0;
00007d d163      	RCALL SUBOPT_0x3
                 ; 0000 005A             if(++timeMin>4)
00007e f428      	BRSH _0x11
                 ; 0000 005B             {
                 ; 0000 005C                   timeMin  = 0;
00007f d168      	RCALL SUBOPT_0x4
                 ; 0000 005D                   if(++time[1] > 11)
000080 f018      	BRLO _0x12
                 ; 0000 005E                   {
                 ; 0000 005F                         time[1] = 0;
000081 d16e      	RCALL SUBOPT_0x5
                 ; 0000 0060                         if(++time[2]>11)
000082 f008      	BRLO _0x13
                 ; 0000 0061                         {
                 ; 0000 0062                             time[2]=0;
000083 d176      	RCALL SUBOPT_0x6
                 ; 0000 0063                         }
                 ; 0000 0064                   }
                 _0x13:
                 ; 0000 0065             }
                 _0x12:
                 ; 0000 0066         }
                 _0x11:
                 ; 0000 0067         break;
                 _0x10:
000084 c01b      	RJMP _0xC
                 ; 0000 0068         case 2:
                 _0xF:
000085 30e2      	CPI  R30,LOW(0x2)
000086 e0a0      	LDI  R26,HIGH(0x2)
000087 07fa      	CPC  R31,R26
000088 f459      	BRNE _0x14
                 ; 0000 0069             if(++time[1] > 11)
                +
000089 91e0 0161+LDS R30 , _time + ( 1 )
                 	__GETB1MN _time,1
00008b 5fef      	SUBI R30,-LOW(1)
                +
00008c 93e0 0161+STS _time + ( 1 ) , R30
                 	__PUTB1MN _time,1
00008e 30ec      	CPI  R30,LOW(0xC)
00008f f018      	BRLO _0x15
                 ; 0000 006A             {
                 ; 0000 006B               time[1] = 0;
000090 d15f      	RCALL SUBOPT_0x5
                 ; 0000 006C               if(++time[2]>11)
000091 f008      	BRLO _0x16
                 ; 0000 006D               {
                 ; 0000 006E                   time[2]=0;
000092 d167      	RCALL SUBOPT_0x6
                 ; 0000 006F               }
                 ; 0000 0070             }
                 _0x16:
                 ; 0000 0071         break;
                 _0x15:
000093 c00c      	RJMP _0xC
                 ; 0000 0072         case 3:
                 _0x14:
000094 30e3      	CPI  R30,LOW(0x3)
000095 e0a0      	LDI  R26,HIGH(0x3)
000096 07fa      	CPC  R31,R26
000097 f441      	BRNE _0xC
                 ; 0000 0073               if(++time[2]>11)
                +
000098 91e0 0162+LDS R30 , _time + ( 2 )
                 	__GETB1MN _time,2
00009a 5fef      	SUBI R30,-LOW(1)
                +
00009b 93e0 0162+STS _time + ( 2 ) , R30
                 	__PUTB1MN _time,2
00009d 30ec      	CPI  R30,LOW(0xC)
00009e f008      	BRLO _0x18
                 ; 0000 0074               {
                 ; 0000 0075                   time[2]=0;
00009f d15a      	RCALL SUBOPT_0x6
                 ; 0000 0076               }
                 ; 0000 0077         break;
                 _0x18:
                 ; 0000 0078       }
                 _0xC:
                 ; 0000 0079    }
                 ; 0000 007A }
                 _0x9:
                 ; 0000 007B else
0000a0 c002      	RJMP _0x19
                 _0x8:
                 ; 0000 007C {
                 ; 0000 007D    btn2PressTime = 240; //Антидребезг контактов
0000a1 efe0      	LDI  R30,LOW(240)
0000a2 2ebe      	MOV  R11,R30
                 ; 0000 007E }
                 _0x19:
                 ; 0000 007F 
                 ; 0000 0080 
                 ; 0000 0081 if(++timeOff < MAX_TIME_OFF)
0000a3 e6a5      	LDI  R26,LOW(_timeOff)
0000a4 e0b1      	LDI  R27,HIGH(_timeOff)
0000a5 91ed      	LD   R30,X+
0000a6 91fd      	LD   R31,X+
0000a7 9631      	ADIW R30,1
0000a8 93fe      	ST   -X,R31
0000a9 93ee      	ST   -X,R30
0000aa 32e0      	CPI  R30,LOW(0x4E20)
0000ab e4ae      	LDI  R26,HIGH(0x4E20)
0000ac 07fa      	CPC  R31,R26
0000ad f00c      	BRLT PC+2
0000ae c096      	RJMP _0x1A
                 ; 0000 0082 {
                 ; 0000 0083     if(btn1state==0)
0000af 2099      	TST  R9
0000b0 f451      	BRNE _0x1B
                 ; 0000 0084     {
                 ; 0000 0085         indSwap &= 1; indSwap ^= 1;
0000b1 e0e1      	LDI  R30,LOW(1)
0000b2 227e      	AND  R7,R30
0000b3 267e      	EOR  R7,R30
                 ; 0000 0086         indState = (int)1<<time[indSwap + btn2state];
0000b4 2da7      	MOV  R26,R7
0000b5 27bb      	CLR  R27
0000b6 2dea      	MOV  R30,R10
0000b7 d120      	RCALL SUBOPT_0x1
0000b8 0fea      	ADD  R30,R26
0000b9 1ffb      	ADC  R31,R27
0000ba c011      	RJMP _0x6D
                 ; 0000 0087     }
                 ; 0000 0088     else
                 _0x1B:
                 ; 0000 0089     {
                 ; 0000 008A     btn2state=1;
0000bb e0e1      	LDI  R30,LOW(1)
0000bc 2eae      	MOV  R10,R30
                 ; 0000 008B     if(btn1state==1) indSwap = 0;
0000bd 15e9      	CP   R30,R9
0000be f409      	BRNE _0x1D
0000bf 2477      	CLR  R7
                 ; 0000 008C     if(btn1state==2) indSwap = 1;
                 _0x1D:
0000c0 e0e2      	LDI  R30,LOW(2)
0000c1 15e9      	CP   R30,R9
0000c2 f411      	BRNE _0x1E
0000c3 e0e1      	LDI  R30,LOW(1)
0000c4 2e7e      	MOV  R7,R30
                 ; 0000 008D     if(btn1state==3) indSwap = 2;
                 _0x1E:
0000c5 e0e3      	LDI  R30,LOW(3)
0000c6 15e9      	CP   R30,R9
0000c7 f411      	BRNE _0x1F
0000c8 e0e2      	LDI  R30,LOW(2)
0000c9 2e7e      	MOV  R7,R30
                 ; 0000 008E     indState = (int)1<<time[indSwap];
                 _0x1F:
0000ca 2de7      	MOV  R30,R7
0000cb d10c      	RCALL SUBOPT_0x1
                 _0x6D:
0000cc 5ae0      	SUBI R30,LOW(-_time)
0000cd 4ffe      	SBCI R31,HIGH(-_time)
0000ce 81e0      	LD   R30,Z
0000cf e0a1      	LDI  R26,LOW(1)
0000d0 e0b0      	LDI  R27,HIGH(1)
0000d1 d143      	RCALL __LSLW12
0000d2 93e0 0163 	STS  _indState,R30
0000d4 93f0 0164 	STS  _indState+1,R31
                 ; 0000 008F     }
                 ; 0000 0090     LINE1 = 0;
0000d6 9894      	CBI  0x12,4
                 ; 0000 0091     LINE2 = 0;
0000d7 98c0      	CBI  0x18,0
                 ; 0000 0092     RD1 = (indState>>0)&1;
0000d8 d125      	RCALL SUBOPT_0x7
0000d9 70e1      	ANDI R30,LOW(0x1)
0000da f411      	BRNE _0x24
0000db 98ac      	CBI  0x15,4
0000dc c001      	RJMP _0x25
                 _0x24:
0000dd 9aac      	SBI  0x15,4
                 _0x25:
                 ; 0000 0093     RD2 = (indState>>1)&1;
0000de d11f      	RCALL SUBOPT_0x7
0000df 95f5      	ASR  R31
0000e0 95e7      	ROR  R30
0000e1 70e1      	ANDI R30,LOW(0x1)
0000e2 f411      	BRNE _0x26
0000e3 98aa      	CBI  0x15,2
0000e4 c001      	RJMP _0x27
                 _0x26:
0000e5 9aaa      	SBI  0x15,2
                 _0x27:
                 ; 0000 0094     RD3 = (indState>>2)&1;
0000e6 d117      	RCALL SUBOPT_0x7
0000e7 d143      	RCALL __ASRW2
0000e8 70e1      	ANDI R30,LOW(0x1)
0000e9 f411      	BRNE _0x28
0000ea 98a8      	CBI  0x15,0
0000eb c001      	RJMP _0x29
                 _0x28:
0000ec 9aa8      	SBI  0x15,0
                 _0x29:
                 ; 0000 0095     RD4 = (indState>>3)&1;
0000ed d110      	RCALL SUBOPT_0x7
0000ee d13a      	RCALL __ASRW3
0000ef 70e1      	ANDI R30,LOW(0x1)
0000f0 f411      	BRNE _0x2A
0000f1 98a9      	CBI  0x15,1
0000f2 c001      	RJMP _0x2B
                 _0x2A:
0000f3 9aa9      	SBI  0x15,1
                 _0x2B:
                 ; 0000 0096     RD5 = (indState>>4)&1;
0000f4 d109      	RCALL SUBOPT_0x7
0000f5 d131      	RCALL __ASRW4
0000f6 70e1      	ANDI R30,LOW(0x1)
0000f7 f411      	BRNE _0x2C
0000f8 98c1      	CBI  0x18,1
0000f9 c001      	RJMP _0x2D
                 _0x2C:
0000fa 9ac1      	SBI  0x18,1
                 _0x2D:
                 ; 0000 0097     RD6 = (indState>>5)&1;
0000fb d107      	RCALL SUBOPT_0x8
0000fc e0e5      	LDI  R30,LOW(5)
0000fd d10a      	RCALL SUBOPT_0x9
0000fe f411      	BRNE _0x2E
0000ff 9897      	CBI  0x12,7
000100 c001      	RJMP _0x2F
                 _0x2E:
000101 9a97      	SBI  0x12,7
                 _0x2F:
                 ; 0000 0098     RD7 = (indState>>6)&1;
000102 d100      	RCALL SUBOPT_0x8
000103 e0e6      	LDI  R30,LOW(6)
000104 d103      	RCALL SUBOPT_0x9
000105 f411      	BRNE _0x30
000106 9896      	CBI  0x12,6
000107 c001      	RJMP _0x31
                 _0x30:
000108 9a96      	SBI  0x12,6
                 _0x31:
                 ; 0000 0099     RD8 = (indState>>7)&1;
000109 d0f9      	RCALL SUBOPT_0x8
00010a e0e7      	LDI  R30,LOW(7)
00010b d0fc      	RCALL SUBOPT_0x9
00010c f411      	BRNE _0x32
00010d 9895      	CBI  0x12,5
00010e c001      	RJMP _0x33
                 _0x32:
00010f 9a95      	SBI  0x12,5
                 _0x33:
                 ; 0000 009A     RD9 = (indState>>8)&1;
000110 d0ed      	RCALL SUBOPT_0x7
000111 d11e      	RCALL __ASRW8
000112 70e1      	ANDI R30,LOW(0x1)
000113 f411      	BRNE _0x34
000114 9893      	CBI  0x12,3
000115 c001      	RJMP _0x35
                 _0x34:
000116 9a93      	SBI  0x12,3
                 _0x35:
                 ; 0000 009B     RD10 = (indState>>9)&1;
000117 d0eb      	RCALL SUBOPT_0x8
000118 e0e9      	LDI  R30,LOW(9)
000119 d0ee      	RCALL SUBOPT_0x9
00011a f411      	BRNE _0x36
00011b 9891      	CBI  0x12,1
00011c c001      	RJMP _0x37
                 _0x36:
00011d 9a91      	SBI  0x12,1
                 _0x37:
                 ; 0000 009C     RD11 = (indState>>10)&1;
00011e d0e4      	RCALL SUBOPT_0x8
00011f e0ea      	LDI  R30,LOW(10)
000120 d0e7      	RCALL SUBOPT_0x9
000121 f411      	BRNE _0x38
000122 9890      	CBI  0x12,0
000123 c001      	RJMP _0x39
                 _0x38:
000124 9a90      	SBI  0x12,0
                 _0x39:
                 ; 0000 009D     RD12 = (indState>>11)&1;
000125 d0dd      	RCALL SUBOPT_0x8
000126 e0eb      	LDI  R30,LOW(11)
000127 d0e0      	RCALL SUBOPT_0x9
000128 f411      	BRNE _0x3A
000129 98ad      	CBI  0x15,5
00012a c001      	RJMP _0x3B
                 _0x3A:
00012b 9aad      	SBI  0x15,5
                 _0x3B:
                 ; 0000 009E 
                 ; 0000 009F     if(btn1state==0 || migMig>125) // Мигание
00012c e0e0      	LDI  R30,LOW(0)
00012d 15e9      	CP   R30,R9
00012e f019      	BREQ _0x3D
00012f e7ed      	LDI  R30,LOW(125)
000130 15ed      	CP   R30,R13
000131 f468      	BRSH _0x3C
                 _0x3D:
                 ; 0000 00A0     {
                 ; 0000 00A1       LINE1 = indSwap&1;
000132 fc70      	SBRC R7,0
000133 c002      	RJMP _0x3F
000134 9894      	CBI  0x12,4
000135 c001      	RJMP _0x40
                 _0x3F:
000136 9a94      	SBI  0x12,4
                 _0x40:
                 ; 0000 00A2       LINE2 = (indSwap&1)^1;
000137 2de7      	MOV  R30,R7
000138 70e1      	ANDI R30,LOW(0x1)
000139 e0a1      	LDI  R26,LOW(1)
00013a 27ea      	EOR  R30,R26
00013b f411      	BRNE _0x41
00013c 98c0      	CBI  0x18,0
00013d c001      	RJMP _0x42
                 _0x41:
00013e 9ac0      	SBI  0x18,0
                 _0x42:
                 ; 0000 00A3     }
                 ; 0000 00A4     if(++migMig>250) migMig=0;
                 _0x3C:
00013f 94d3      	INC  R13
000140 efea      	LDI  R30,LOW(250)
000141 15ed      	CP   R30,R13
000142 f408      	BRSH _0x43
000143 24dd      	CLR  R13
                 ; 0000 00A5 }
                 _0x43:
                 ; 0000 00A6 else
000144 c012      	RJMP _0x44
                 _0x1A:
                 ; 0000 00A7 {
                 ; 0000 00A8     btn2state=1;
000145 e0e1      	LDI  R30,LOW(1)
000146 2eae      	MOV  R10,R30
                 ; 0000 00A9     isIndEnable = 0;
000147 2466      	CLR  R6
                 ; 0000 00AA     btn1state = 0;
000148 2499      	CLR  R9
                 ; 0000 00AB     RD1 = 0;     //Выключаем светодиоды
000149 98ac      	CBI  0x15,4
                 ; 0000 00AC     RD2 = 0;
00014a 98aa      	CBI  0x15,2
                 ; 0000 00AD     RD3 = 0;
00014b 98a8      	CBI  0x15,0
                 ; 0000 00AE     RD4 = 0;
00014c 98a9      	CBI  0x15,1
                 ; 0000 00AF     RD5 = 0;
00014d 98c1      	CBI  0x18,1
                 ; 0000 00B0     RD6 = 0;
00014e 9897      	CBI  0x12,7
                 ; 0000 00B1     RD7 = 0;
00014f 9896      	CBI  0x12,6
                 ; 0000 00B2     RD8 = 0;
000150 9895      	CBI  0x12,5
                 ; 0000 00B3     RD9 = 0;
000151 9893      	CBI  0x12,3
                 ; 0000 00B4     RD10 = 0;
000152 9891      	CBI  0x12,1
                 ; 0000 00B5     RD11 = 0;
000153 9890      	CBI  0x12,0
                 ; 0000 00B6     RD12 = 0;
000154 98ad      	CBI  0x15,5
                 ; 0000 00B7     LINE1 = 0;
000155 9894      	CBI  0x12,4
                 ; 0000 00B8     LINE2 = 0;
000156 98c0      	CBI  0x18,0
                 ; 0000 00B9 
                 ; 0000 00BA }
                 _0x44:
                 ; 0000 00BB 
                 ; 0000 00BC }
000157 91e9      	LD   R30,Y+
000158 bfef      	OUT  SREG,R30
000159 91f9      	LD   R31,Y+
00015a 91e9      	LD   R30,Y+
00015b 91b9      	LD   R27,Y+
00015c 91a9      	LD   R26,Y+
00015d 9009      	LD   R0,Y+
00015e 9518      	RETI
                 ;
                 ;// Timer2 overflow interrupt service routine
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 00C0 {
                 _timer2_ovf_isr:
00015f 93aa      	ST   -Y,R26
000160 93ea      	ST   -Y,R30
000161 b7ef      	IN   R30,SREG
000162 93ea      	ST   -Y,R30
                 ; 0000 00C1     #asm("wdr")
000163 95a8      	wdr
                 ; 0000 00C2 
                 ; 0000 00C3 if(btn1state==0 && ++timeSec > 4) //Считаем время, если статус кнопки = 0
000164 e0e0      	LDI  R30,LOW(0)
000165 15e9      	CP   R30,R9
000166 f421      	BRNE _0x62
000167 9453      	INC  R5
000168 e0e4      	LDI  R30,LOW(4)
000169 15e5      	CP   R30,R5
00016a f008      	BRLO _0x63
                 _0x62:
00016b c00a      	RJMP _0x61
                 _0x63:
                 ; 0000 00C4 {
                 ; 0000 00C5     timeSec = 0;
00016c 2455      	CLR  R5
                 ; 0000 00C6     if(++time[0]>11)
00016d d06c      	RCALL SUBOPT_0x2
00016e f038      	BRLO _0x64
                 ; 0000 00C7     {
                 ; 0000 00C8         time[0] = 0;
00016f d071      	RCALL SUBOPT_0x3
                 ; 0000 00C9         if(++timeMin>4)
000170 f428      	BRSH _0x65
                 ; 0000 00CA         {
                 ; 0000 00CB               timeMin  = 0;
000171 d076      	RCALL SUBOPT_0x4
                 ; 0000 00CC               if(++time[1] > 11)
000172 f018      	BRLO _0x66
                 ; 0000 00CD               {
                 ; 0000 00CE                     time[1] = 0;
000173 d07c      	RCALL SUBOPT_0x5
                 ; 0000 00CF                     if(++time[2]>11)
000174 f008      	BRLO _0x67
                 ; 0000 00D0                     {
                 ; 0000 00D1                         time[2]=0;
000175 d084      	RCALL SUBOPT_0x6
                 ; 0000 00D2                     }
                 ; 0000 00D3               }
                 _0x67:
                 ; 0000 00D4         }
                 _0x66:
                 ; 0000 00D5     }
                 _0x65:
                 ; 0000 00D6 }
                 _0x64:
                 ; 0000 00D7 
                 ; 0000 00D8     if(!isIndEnable) //Идем спать
                 _0x61:
000176 2066      	TST  R6
000177 f471      	BRNE _0x68
                 ; 0000 00D9     {
                 ; 0000 00DA         btn1state = 0;
000178 2499      	CLR  R9
                 ; 0000 00DB         TCCR0=0x00; //Выключаем таймер 0, для экономии энергии
000179 e0e0      	LDI  R30,LOW(0)
00017a bfe3      	OUT  0x33,R30
                 ; 0000 00DC         GICR|=0x40; //Включаем INT0, чтоб проснутся по кнопке
00017b b7eb      	IN   R30,0x3B
00017c 64e0      	ORI  R30,0x40
00017d d08d      	RCALL SUBOPT_0xA
                 ; 0000 00DD         GIFR|=0x40; //Сбрасываем флаг прерывания INT0
                 ; 0000 00DE         TIFR|=0x41; //Сбрасываем флаг прерывания таймеров
00017e b7e8      	IN   R30,0x38
00017f 64e1      	ORI  R30,LOW(0x41)
000180 bfe8      	OUT  0x38,R30
                 ; 0000 00DF         #asm("sei") //Разрешаем прерывания глобально
000181 9478      	sei
                 ; 0000 00E0         MCUCR |= 128; //Разрешаем сон
000182 b7e5      	IN   R30,0x35
000183 68e0      	ORI  R30,0x80
000184 bfe5      	OUT  0x35,R30
                 ; 0000 00E1         #asm("sleep") //Спим
000185 9588      	sleep
                 ; 0000 00E2     }
                 ; 0000 00E3 }
                 _0x68:
000186 91e9      	LD   R30,Y+
000187 bfef      	OUT  SREG,R30
000188 91e9      	LD   R30,Y+
000189 91a9      	LD   R26,Y+
00018a 9518      	RETI
                 ;
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 00E8 {
                 _ext_int0_isr:
00018b 93ea      	ST   -Y,R30
00018c b7ef      	IN   R30,SREG
00018d 93ea      	ST   -Y,R30
                 ; 0000 00E9   //Просыпаемся
                 ; 0000 00EA   MCUCR &= ~128; //Запрещаем спать (хз зачем)
00018e b7e5      	IN   R30,0x35
00018f 77ef      	ANDI R30,0x7F
000190 bfe5      	OUT  0x35,R30
                 ; 0000 00EB   GICR&= ~0x40;   // Выключаем INT0, чтоб не сидеть в нем вечно
000191 b7eb      	IN   R30,0x3B
000192 7bef      	ANDI R30,0xBF
000193 d077      	RCALL SUBOPT_0xA
                 ; 0000 00EC   GIFR|= 0x40;    // Сбрасываем флаг (на всяк случай)
                 ; 0000 00ED   TCCR0=0x02;     // Запускаем таймер 0
000194 d07b      	RCALL SUBOPT_0xB
                 ; 0000 00EE   TCNT0=0x83;
                 ; 0000 00EF   isIndEnable = 1; //Включаем индикацию
000195 e0e1      	LDI  R30,LOW(1)
000196 2e6e      	MOV  R6,R30
                 ; 0000 00F0 }
000197 91e9      	LD   R30,Y+
000198 bfef      	OUT  SREG,R30
000199 91e9      	LD   R30,Y+
00019a 9518      	RETI
                 ;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 00F6 {
                 _main:
                 ; 0000 00F7 // Declare your local variables here
                 ; 0000 00F8 
                 ; 0000 00F9 // Input/Output Ports initialization
                 ; 0000 00FA // Port B initialization
                 ; 0000 00FB // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
                 ; 0000 00FC // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=0
                 ; 0000 00FD PORTB=0x00;
00019b e0e0      	LDI  R30,LOW(0)
00019c bbe8      	OUT  0x18,R30
                 ; 0000 00FE DDRB=0x03;
00019d e0e3      	LDI  R30,LOW(3)
00019e bbe7      	OUT  0x17,R30
                 ; 0000 00FF 
                 ; 0000 0100 // Port C initialization
                 ; 0000 0101 // Func6=In Func5=Out Func4=Out Func3=In Func2=Out Func1=Out Func0=Out
                 ; 0000 0102 // State6=T State5=0 State4=0 State3=P State2=0 State1=0 State0=0
                 ; 0000 0103 PORTC=0x08;
00019f e0e8      	LDI  R30,LOW(8)
0001a0 bbe5      	OUT  0x15,R30
                 ; 0000 0104 DDRC=0x37;
0001a1 e3e7      	LDI  R30,LOW(55)
0001a2 bbe4      	OUT  0x14,R30
                 ; 0000 0105 
                 ; 0000 0106 // Port D initialization
                 ; 0000 0107 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
                 ; 0000 0108 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=P State1=0 State0=0
                 ; 0000 0109 PORTD=0x04;
0001a3 e0e4      	LDI  R30,LOW(4)
0001a4 bbe2      	OUT  0x12,R30
                 ; 0000 010A DDRD=0xFB;
0001a5 efeb      	LDI  R30,LOW(251)
0001a6 bbe1      	OUT  0x11,R30
                 ; 0000 010B 
                 ; 0000 010C 
                 ; 0000 010D // Timer/Counter 0 initialization
                 ; 0000 010E // Clock source: System Clock
                 ; 0000 010F // Clock value: 125,000 kHz
                 ; 0000 0110 TCCR0=0x02;
0001a7 d068      	RCALL SUBOPT_0xB
                 ; 0000 0111 TCNT0=0x83;
                 ; 0000 0112 
                 ; 0000 0113 // Timer/Counter 1 initialization
                 ; 0000 0114 // Clock source: System Clock
                 ; 0000 0115 // Clock value: Timer1 Stopped
                 ; 0000 0116 // Mode: Normal top=0xFFFF
                 ; 0000 0117 // OC1A output: Discon.
                 ; 0000 0118 // OC1B output: Discon.
                 ; 0000 0119 // Noise Canceler: Off
                 ; 0000 011A // Input Capture on Falling Edge
                 ; 0000 011B // Timer1 Overflow Interrupt: Off
                 ; 0000 011C // Input Capture Interrupt: Off
                 ; 0000 011D // Compare A Match Interrupt: Off
                 ; 0000 011E // Compare B Match Interrupt: Off
                 ; 0000 011F TCCR1A=0x00;
0001a8 e0e0      	LDI  R30,LOW(0)
0001a9 bdef      	OUT  0x2F,R30
                 ; 0000 0120 TCCR1B=0x00;
0001aa bdee      	OUT  0x2E,R30
                 ; 0000 0121 TCNT1H=0x00;
0001ab bded      	OUT  0x2D,R30
                 ; 0000 0122 TCNT1L=0x00;
0001ac bdec      	OUT  0x2C,R30
                 ; 0000 0123 ICR1H=0x00;
0001ad bde7      	OUT  0x27,R30
                 ; 0000 0124 ICR1L=0x00;
0001ae bde6      	OUT  0x26,R30
                 ; 0000 0125 OCR1AH=0x00;
0001af bdeb      	OUT  0x2B,R30
                 ; 0000 0126 OCR1AL=0x00;
0001b0 bdea      	OUT  0x2A,R30
                 ; 0000 0127 OCR1BH=0x00;
0001b1 bde9      	OUT  0x29,R30
                 ; 0000 0128 OCR1BL=0x00;
0001b2 bde8      	OUT  0x28,R30
                 ; 0000 0129 
                 ; 0000 012A // Timer/Counter 2 initialization
                 ; 0000 012B // Clock source: TOSC1 pin
                 ; 0000 012C // Clock value: PCK2/128
                 ; 0000 012D // Mode: Normal top=0xFF
                 ; 0000 012E // OC2 output: Disconnected
                 ; 0000 012F ASSR=0x08;
0001b3 e0e8      	LDI  R30,LOW(8)
0001b4 bde2      	OUT  0x22,R30
                 ; 0000 0130 TCCR2=0x05;
0001b5 e0e5      	LDI  R30,LOW(5)
0001b6 bde5      	OUT  0x25,R30
                 ; 0000 0131 TCNT2=0x00;
0001b7 e0e0      	LDI  R30,LOW(0)
0001b8 bde4      	OUT  0x24,R30
                 ; 0000 0132 OCR2=0x00;
0001b9 bde3      	OUT  0x23,R30
                 ; 0000 0133 
                 ; 0000 0134 // External Interrupt(s) initialization
                 ; 0000 0135 // INT0: On
                 ; 0000 0136 // INT0 Mode: Low level
                 ; 0000 0137 // INT1: Off
                 ; 0000 0138 GICR|=0x40;
0001ba b7eb      	IN   R30,0x3B
0001bb 64e0      	ORI  R30,0x40
0001bc bfeb      	OUT  0x3B,R30
                 ; 0000 0139 MCUCR=0x00;
0001bd e0e0      	LDI  R30,LOW(0)
0001be bfe5      	OUT  0x35,R30
                 ; 0000 013A GIFR=0x40;
0001bf e4e0      	LDI  R30,LOW(64)
0001c0 bfea      	OUT  0x3A,R30
                 ; 0000 013B 
                 ; 0000 013C // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 013D TIMSK=0x41;
0001c1 e4e1      	LDI  R30,LOW(65)
0001c2 bfe9      	OUT  0x39,R30
                 ; 0000 013E 
                 ; 0000 013F // USART initialization
                 ; 0000 0140 // USART disabled
                 ; 0000 0141 UCSRB=0x00;
0001c3 e0e0      	LDI  R30,LOW(0)
0001c4 b9ea      	OUT  0xA,R30
                 ; 0000 0142 
                 ; 0000 0143 // Analog Comparator initialization
                 ; 0000 0144 // Analog Comparator: Off
                 ; 0000 0145 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0146 ACSR=0x80;
0001c5 e8e0      	LDI  R30,LOW(128)
0001c6 b9e8      	OUT  0x8,R30
                 ; 0000 0147 SFIOR=0x00;
0001c7 e0e0      	LDI  R30,LOW(0)
0001c8 bfe0      	OUT  0x30,R30
                 ; 0000 0148 
                 ; 0000 0149 // ADC initialization
                 ; 0000 014A // ADC disabled
                 ; 0000 014B ADCSRA=0x00;
0001c9 b9e6      	OUT  0x6,R30
                 ; 0000 014C 
                 ; 0000 014D // SPI initialization
                 ; 0000 014E // SPI disabled
                 ; 0000 014F SPCR=0x00;
0001ca b9ed      	OUT  0xD,R30
                 ; 0000 0150 
                 ; 0000 0151 // TWI initialization
                 ; 0000 0152 // TWI disabled
                 ; 0000 0153 TWCR=0x00;
0001cb bfe6      	OUT  0x36,R30
                 ; 0000 0154 
                 ; 0000 0155 // Watchdog Timer initialization
                 ; 0000 0156 // Watchdog Timer Prescaler: OSC/2048k
                 ; 0000 0157 #pragma optsize-
                 ; 0000 0158 //WDTCR=0x1F;
                 ; 0000 0159 //WDTCR=0x0F;
                 ; 0000 015A #ifdef _OPTIMIZE_SIZE_
                 ; 0000 015B #pragma optsize+
                 ; 0000 015C #endif
                 ; 0000 015D 
                 ; 0000 015E MCUCR |= 0b00110000; //Power-save
0001cc b7e5      	IN   R30,0x35
0001cd 63e0      	ORI  R30,LOW(0x30)
0001ce bfe5      	OUT  0x35,R30
                 ; 0000 015F 
                 ; 0000 0160 // Global enable interrupts
                 ; 0000 0161 #asm("sei")
0001cf 9478      	sei
                 ; 0000 0162 
                 ; 0000 0163 while (1)
                 _0x69:
                 ; 0000 0164       {
                 ; 0000 0165 
                 ; 0000 0166 
                 ; 0000 0167       }
0001d0 cfff      	RJMP _0x69
                 ; 0000 0168 }
                 _0x6C:
0001d1 cfff      	RJMP _0x6C
                 
                 	.DSEG
                 _time:
000160           	.BYTE 0x3
                 _indState:
000163           	.BYTE 0x2
                 _timeOff:
000165           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0001d2 e0e0      	LDI  R30,LOW(0)
0001d3 93e0 0165 	STS  _timeOff,R30
0001d5 93e0 0166 	STS  _timeOff+1,R30
0001d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0001d8 e0f0      	LDI  R31,0
0001d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0001da 91a0 0160 	LDS  R26,_time
0001dc 5faf      	SUBI R26,-LOW(1)
0001dd 93a0 0160 	STS  _time,R26
0001df 30ac      	CPI  R26,LOW(0xC)
0001e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0001e1 e0e0      	LDI  R30,LOW(0)
0001e2 93e0 0160 	STS  _time,R30
0001e4 9443      	INC  R4
0001e5 e0e4      	LDI  R30,LOW(4)
0001e6 15e4      	CP   R30,R4
0001e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0001e8 2444      	CLR  R4
                +
0001e9 91e0 0161+LDS R30 , _time + ( 1 )
                 	__GETB1MN _time,1
0001eb 5fef      	SUBI R30,-LOW(1)
                +
0001ec 93e0 0161+STS _time + ( 1 ) , R30
                 	__PUTB1MN _time,1
0001ee 30ec      	CPI  R30,LOW(0xC)
0001ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x5:
0001f0 e0e0      	LDI  R30,LOW(0)
                +
0001f1 93e0 0161+STS _time + ( 1 ) , R30
                 	__PUTB1MN _time,1
                +
0001f3 91e0 0162+LDS R30 , _time + ( 2 )
                 	__GETB1MN _time,2
0001f5 5fef      	SUBI R30,-LOW(1)
                +
0001f6 93e0 0162+STS _time + ( 2 ) , R30
                 	__PUTB1MN _time,2
0001f8 30ec      	CPI  R30,LOW(0xC)
0001f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
0001fa e0e0      	LDI  R30,LOW(0)
                +
0001fb 93e0 0162+STS _time + ( 2 ) , R30
                 	__PUTB1MN _time,2
0001fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7:
0001fe 91e0 0163 	LDS  R30,_indState
000200 91f0 0164 	LDS  R31,_indState+1
000202 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
000203 91a0 0163 	LDS  R26,_indState
000205 91b0 0164 	LDS  R27,_indState+1
000207 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000208 d015      	RCALL __ASRW12
000209 70e1      	ANDI R30,LOW(0x1)
00020a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00020b bfeb      	OUT  0x3B,R30
00020c b7ea      	IN   R30,0x3A
00020d 64e0      	ORI  R30,0x40
00020e bfea      	OUT  0x3A,R30
00020f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000210 e0e2      	LDI  R30,LOW(2)
000211 bfe3      	OUT  0x33,R30
000212 e8e3      	LDI  R30,LOW(131)
000213 bfe2      	OUT  0x32,R30
000214 9508      	RET
                 
                 
                 	.CSEG
                 __LSLW12:
000215 23ee      	TST  R30
000216 2e0e      	MOV  R0,R30
000217 01fd      	MOVW R30,R26
000218 f021      	BREQ __LSLW12R
                 __LSLW12L:
000219 0fee      	LSL  R30
00021a 1fff      	ROL  R31
00021b 940a      	DEC  R0
00021c f7e1      	BRNE __LSLW12L
                 __LSLW12R:
00021d 9508      	RET
                 
                 __ASRW12:
00021e 23ee      	TST  R30
00021f 2e0e      	MOV  R0,R30
000220 01fd      	MOVW R30,R26
000221 f021      	BREQ __ASRW12R
                 __ASRW12L:
000222 95f5      	ASR  R31
000223 95e7      	ROR  R30
000224 940a      	DEC  R0
000225 f7e1      	BRNE __ASRW12L
                 __ASRW12R:
000226 9508      	RET
                 
                 __ASRW4:
000227 95f5      	ASR  R31
000228 95e7      	ROR  R30
                 __ASRW3:
000229 95f5      	ASR  R31
00022a 95e7      	ROR  R30
                 __ASRW2:
00022b 95f5      	ASR  R31
00022c 95e7      	ROR  R30
00022d 95f5      	ASR  R31
00022e 95e7      	ROR  R30
00022f 9508      	RET
                 
                 __ASRW8:
000230 2fef      	MOV  R30,R31
000231 27ff      	CLR  R31
000232 fde7      	SBRC R30,7
000233 efff      	SER  R31
000234 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  10 r1 :   1 r2 :   0 r3 :   0 r4 :   3 r5 :   3 r6 :   3 r7 :   9 
r8 :   4 r9 :  12 r10:   6 r11:   4 r12:   0 r13:   4 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   7 r25:   2 r26:  28 r27:   9 r28:   1 r29:   1 r30: 224 r31:  28 
x  :   7 y  :  22 z  :   8 
Registers used: 23 out of 35 (65.7%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   1 and   :   1 andi  :  10 asr   :   6 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   1 brmi  :   0 brne  :  29 brpl  :   0 brsh  :   8 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  30 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  14 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  14 
cpc   :   4 cpi   :   9 cpse  :   0 dec   :   4 des   :   0 eor   :   2 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :  11 
inc   :   6 ld    :  14 ldd   :   0 ldi   :  73 lds   :   9 lpm   :   7 
lsl   :   1 lsr   :   0 mov   :  15 movw  :   5 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   6 out   :  51 
pop   :   0 push  :   0 rcall :  46 ret   :  16 reti  :   3 rjmp  :  49 
rol   :   1 ror   :   6 sbc   :   0 sbci  :   1 sbi   :  14 sbic  :   2 
sbis  :   0 sbiw  :   4 sbr   :   0 sbrc  :   2 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   2 sen   :   0 ser   :   1 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   1 spm   :   0 st    :  16 std   :   0 
sts   :  12 sub   :   0 subi  :   6 swap  :   0 tst   :   4 wdr   :   1 

Instructions used: 49 out of 114 (43.0%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00046a   1112     18   1130    8192  13.8%
[.dseg] 0x000060 0x000167      0      7      7    1119   0.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
