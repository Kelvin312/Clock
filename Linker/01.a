;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 15.09.2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 1,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#define RD1 PORTC.4
;#define RD2 PORTC.2
;#define RD3 PORTC.0
;#define RD4 PORTC.1
;#define RD5 PORTB.1
;#define RD6 PORTD.7
;#define RD7 PORTD.6
;#define RD8 PORTD.5
;#define RD9 PORTD.3
;#define RD10 PORTD.1
;#define RD11 PORTD.0
;#define RD12 PORTC.5
;#define LINE2 PORTB.0
;#define LINE1 PORTD.4
;#define BTN2 PIND.2
;#define BTN1 PINC.3
;
;#define MAX_TIME_OFF (20*1000)
;
;char time[3]={0,0,0};
;char timeSec=0, timeMin=0;
;char  indSwap=0, isIndEnable=1;
;char btn1state = 0, btn1PressTime = 0, btn2PressTime = 0, btn2state=1;
;char migMig=0;
;int indState, timeOff=0;
;
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)  //1ms
; 0000 0038 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0039 // Reinitialize Timer 0 value
; 0000 003A TCNT0=0x83;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 003B 
; 0000 003C // Place your code here
; 0000 003D if(BTN1 == 0)
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 003E {
; 0000 003F   timeOff = 0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0040   if(btn1PressTime == 50) //Антидребезг контактов
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0041   {
; 0000 0042       btn1PressTime = 0;
;PCODE: $00000019 VOL: 0
; 0000 0043       if(++btn1state>3) btn1state=0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0044   }
;PCODE: $0000001F VOL: 0
; 0000 0045 }
;PCODE: $00000020 VOL: 0
; 0000 0046 else
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0047 {
; 0000 0048   if(btn1PressTime<50)btn1PressTime++;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0049 }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 004A 
; 0000 004B if(BTN2 == 0)
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 004C {
; 0000 004D    timeOff = 0;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004E    if(++btn2PressTime > 250)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 004F    {
; 0000 0050       btn2PressTime = 0;
;PCODE: $00000032 VOL: 0
; 0000 0051       switch(btn1state)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0052       {
; 0000 0053         case 0:
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0054           if(--btn2state>1)btn2state=1;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0055         break;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0056         case 1:
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0057         if(++time[0]>11)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0058         {
; 0000 0059             time[0] = 0;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005A             if(++timeMin>4)
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 005B             {
; 0000 005C                   timeMin  = 0;
;PCODE: $0000004D VOL: 0
; 0000 005D                   if(++time[1] > 11)
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 005E                   {
; 0000 005F                         time[1] = 0;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0060                         if(++time[2]>11)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0061                         {
; 0000 0062                             time[2]=0;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0063                         }
; 0000 0064                   }
;PCODE: $00000062 VOL: 0
; 0000 0065             }
;PCODE: $00000063 VOL: 0
; 0000 0066         }
;PCODE: $00000064 VOL: 0
; 0000 0067         break;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0068         case 2:
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0069             if(++time[1] > 11)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 006A             {
; 0000 006B               time[1] = 0;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 006C               if(++time[2]>11)
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 006D               {
; 0000 006E                   time[2]=0;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 006F               }
; 0000 0070             }
;PCODE: $0000007E VOL: 0
; 0000 0071         break;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0072         case 3:
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0073               if(++time[2]>11)
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0074               {
; 0000 0075                   time[2]=0;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0076               }
; 0000 0077         break;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0078       }
;PCODE: $00000090 VOL: 0
; 0000 0079    }
; 0000 007A }
;PCODE: $00000091 VOL: 0
; 0000 007B else
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 007C {
; 0000 007D    btn2PressTime = 240; //Антидребезг контактов
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 007E }
;PCODE: $00000096 VOL: 0
; 0000 007F 
; 0000 0080 
; 0000 0081 if(++timeOff < MAX_TIME_OFF)
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0082 {
; 0000 0083     if(btn1state==0)
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0084     {
; 0000 0085         indSwap &= 1; indSwap ^= 1;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0086         indState = (int)1<<time[indSwap + btn2state];
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0087     }
; 0000 0088     else
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0089     {
; 0000 008A     btn2state=1;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 008B     if(btn1state==1) indSwap = 0;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 008C     if(btn1state==2) indSwap = 1;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 008D     if(btn1state==3) indSwap = 2;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 008E     indState = (int)1<<time[indSwap];
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 008F     }
;PCODE: $000000CB VOL: 0
; 0000 0090     LINE1 = 0;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0091     LINE2 = 0;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0092     RD1 = (indState>>0)&1;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0093     RD2 = (indState>>1)&1;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0094     RD3 = (indState>>2)&1;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0095     RD4 = (indState>>3)&1;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0096     RD5 = (indState>>4)&1;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0097     RD6 = (indState>>5)&1;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0098     RD7 = (indState>>6)&1;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0099     RD8 = (indState>>7)&1;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 009A     RD9 = (indState>>8)&1;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 009B     RD10 = (indState>>9)&1;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 009C     RD11 = (indState>>10)&1;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 009D     RD12 = (indState>>11)&1;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 009E 
; 0000 009F     if(btn1state==0 || migMig>125) // Мигание
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00A0     {
; 0000 00A1       LINE1 = indSwap&1;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00A2       LINE2 = (indSwap&1)^1;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00A3     }
; 0000 00A4     if(++migMig>250) migMig=0;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00A5 }
;PCODE: $0000017D VOL: 0
; 0000 00A6 else
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00A7 {
; 0000 00A8     btn2state=1;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00A9     isIndEnable = 0;
;PCODE: $00000182 VOL: 0
; 0000 00AA     btn1state = 0;
;PCODE: $00000183 VOL: 0
; 0000 00AB     RD1 = 0;     //Выключаем светодиоды
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00AC     RD2 = 0;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00AD     RD3 = 0;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00AE     RD4 = 0;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00AF     RD5 = 0;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00B0     RD6 = 0;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00B1     RD7 = 0;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00B2     RD8 = 0;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00B3     RD9 = 0;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00B4     RD10 = 0;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00B5     RD11 = 0;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00B6     RD12 = 0;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00B7     LINE1 = 0;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00B8     LINE2 = 0;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 00B9 
; 0000 00BA }
;PCODE: $000001A0 VOL: 0
; 0000 00BB 
; 0000 00BC }
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 00C0 {
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 00C1     #asm("wdr")
;PCODE: $000001A6 VOL: 0
	wdr
;PCODE: $000001A7 VOL: 0
; 0000 00C2 
; 0000 00C3 if(btn1state==0 && ++timeSec > 4) //Считаем время, если статус кнопки = 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 00C4 {
; 0000 00C5     timeSec = 0;
;PCODE: $000001B3 VOL: 0
; 0000 00C6     if(++time[0]>11)
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00C7     {
; 0000 00C8         time[0] = 0;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 00C9         if(++timeMin>4)
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00CA         {
; 0000 00CB               timeMin  = 0;
;PCODE: $000001BF VOL: 0
; 0000 00CC               if(++time[1] > 11)
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00CD               {
; 0000 00CE                     time[1] = 0;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 00CF                     if(++time[2]>11)
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 00D0                     {
; 0000 00D1                         time[2]=0;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 00D2                     }
; 0000 00D3               }
;PCODE: $000001D4 VOL: 0
; 0000 00D4         }
;PCODE: $000001D5 VOL: 0
; 0000 00D5     }
;PCODE: $000001D6 VOL: 0
; 0000 00D6 }
;PCODE: $000001D7 VOL: 0
; 0000 00D7 
; 0000 00D8     if(!isIndEnable) //Идем спать
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 00D9     {
; 0000 00DA         btn1state = 0;
;PCODE: $000001DB VOL: 0
; 0000 00DB         TCCR0=0x00; //Выключаем таймер 0, для экономии энергии
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 00DC         GICR|=0x40; //Включаем INT0, чтоб проснутся по кнопке
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00DD         GIFR|=0x40; //Сбрасываем флаг прерывания INT0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00DE         TIFR|=0x41; //Сбрасываем флаг прерывания таймеров
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 00DF         #asm("sei") //Разрешаем прерывания глобально
;PCODE: $000001E7 VOL: 0
	sei
;PCODE: $000001E8 VOL: 0
; 0000 00E0         MCUCR |= 128; //Разрешаем сон
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00E1         #asm("sleep") //Спим
;PCODE: $000001EC VOL: 0
	sleep
;PCODE: $000001ED VOL: 0
; 0000 00E2     }
; 0000 00E3 }
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 00E8 {
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 00E9   //Просыпаемся
; 0000 00EA   MCUCR &= ~128; //Запрещаем спать (хз зачем)
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 00EB   GICR&= ~0x40;   // Выключаем INT0, чтоб не сидеть в нем вечно
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 00EC   GIFR|= 0x40;    // Сбрасываем флаг (на всяк случай)
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 00ED   TCCR0=0x02;     // Запускаем таймер 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 00EE   TCNT0=0x83;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 00EF   isIndEnable = 1; //Включаем индикацию
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 00F0 }
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 00F6 {
;PCODE: $00000206 VOL: 0
; 0000 00F7 // Declare your local variables here
; 0000 00F8 
; 0000 00F9 // Input/Output Ports initialization
; 0000 00FA // Port B initialization
; 0000 00FB // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 00FC // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=0
; 0000 00FD PORTB=0x00;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 00FE DDRB=0x03;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 00FF 
; 0000 0100 // Port C initialization
; 0000 0101 // Func6=In Func5=Out Func4=Out Func3=In Func2=Out Func1=Out Func0=Out
; 0000 0102 // State6=T State5=0 State4=0 State3=P State2=0 State1=0 State0=0
; 0000 0103 PORTC=0x08;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0104 DDRC=0x37;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0105 
; 0000 0106 // Port D initialization
; 0000 0107 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
; 0000 0108 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=P State1=0 State0=0
; 0000 0109 PORTD=0x04;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 010A DDRD=0xFB;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 010B 
; 0000 010C 
; 0000 010D // Timer/Counter 0 initialization
; 0000 010E // Clock source: System Clock
; 0000 010F // Clock value: 125,000 kHz
; 0000 0110 TCCR0=0x02;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0111 TCNT0=0x83;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0112 
; 0000 0113 // Timer/Counter 1 initialization
; 0000 0114 // Clock source: System Clock
; 0000 0115 // Clock value: Timer1 Stopped
; 0000 0116 // Mode: Normal top=0xFFFF
; 0000 0117 // OC1A output: Discon.
; 0000 0118 // OC1B output: Discon.
; 0000 0119 // Noise Canceler: Off
; 0000 011A // Input Capture on Falling Edge
; 0000 011B // Timer1 Overflow Interrupt: Off
; 0000 011C // Input Capture Interrupt: Off
; 0000 011D // Compare A Match Interrupt: Off
; 0000 011E // Compare B Match Interrupt: Off
; 0000 011F TCCR1A=0x00;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0120 TCCR1B=0x00;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0121 TCNT1H=0x00;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0122 TCNT1L=0x00;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0123 ICR1H=0x00;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0124 ICR1L=0x00;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 0125 OCR1AH=0x00;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 0126 OCR1AL=0x00;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 0127 OCR1BH=0x00;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0128 OCR1BL=0x00;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 0129 
; 0000 012A // Timer/Counter 2 initialization
; 0000 012B // Clock source: TOSC1 pin
; 0000 012C // Clock value: PCK2/128
; 0000 012D // Mode: Normal top=0xFF
; 0000 012E // OC2 output: Disconnected
; 0000 012F ASSR=0x08;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 0130 TCCR2=0x05;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0131 TCNT2=0x00;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0132 OCR2=0x00;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0133 
; 0000 0134 // External Interrupt(s) initialization
; 0000 0135 // INT0: On
; 0000 0136 // INT0 Mode: Low level
; 0000 0137 // INT1: Off
; 0000 0138 GICR|=0x40;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0139 MCUCR=0x00;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 013A GIFR=0x40;
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 013B 
; 0000 013C // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 013D TIMSK=0x41;
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 013E 
; 0000 013F // USART initialization
; 0000 0140 // USART disabled
; 0000 0141 UCSRB=0x00;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0142 
; 0000 0143 // Analog Comparator initialization
; 0000 0144 // Analog Comparator: Off
; 0000 0145 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0146 ACSR=0x80;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0147 SFIOR=0x00;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0148 
; 0000 0149 // ADC initialization
; 0000 014A // ADC disabled
; 0000 014B ADCSRA=0x00;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 014C 
; 0000 014D // SPI initialization
; 0000 014E // SPI disabled
; 0000 014F SPCR=0x00;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 0150 
; 0000 0151 // TWI initialization
; 0000 0152 // TWI disabled
; 0000 0153 TWCR=0x00;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 0154 
; 0000 0155 // Watchdog Timer initialization
; 0000 0156 // Watchdog Timer Prescaler: OSC/2048k
; 0000 0157 #pragma optsize-
; 0000 0158 //WDTCR=0x1F;
; 0000 0159 //WDTCR=0x0F;
; 0000 015A #ifdef _OPTIMIZE_SIZE_
; 0000 015B #pragma optsize+
; 0000 015C #endif
; 0000 015D 
; 0000 015E MCUCR |= 0b00110000; //Power-save
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 015F 
; 0000 0160 // Global enable interrupts
; 0000 0161 #asm("sei")
;PCODE: $0000024B VOL: 0
	sei
;PCODE: $0000024C VOL: 0
; 0000 0162 
; 0000 0163 while (1)
;PCODE: $0000024D VOL: 0
; 0000 0164       {
; 0000 0165 
; 0000 0166 
; 0000 0167       }
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0168 }
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
